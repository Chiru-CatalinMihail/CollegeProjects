========================================== README Tema 1 IOCLA =======================================
========================================== Chiru Catalin-Mihail ======================================
================================================= 322CB ==============================================

Probleme intampinate pe parcursul rezolvarii temei si solutionarea finala a acestora:
-initial am avut 2 atoiuri unul negativ si unul pozitiv, cel pozitiv este cel ramas in implementare,
iar cel negativ se comporta exact la fel doar ca pe minus
	eax=0
	for(i=1; i<=strlen(string); i++) //i=0 corespunde charului '-'
		eax=eax*10-(dl-'0') (unde dl este caracterul curent din string)

Am facut debugging cu aceasta varianta pe sasm si se comporta neasteptat.
Lucram cu un input de tipul / -92 14
Si avea comportamentul urmator:
eax=0 dl=9 => eax=-9
eax=-9 dl=2 => in momentul in trebuia sa faca eax= -90-2 (teoretic), practic lui edx ii era asignata
valoarea -216 si eax= -90+216=126 desi ma asiguram inaintea acestei inmultiri si scaderi sa xorez edx
Deci operatia practica ar fi trebuit sa se realizeze doar cu ce se obtinea in dl=caract-'0'

Nemergand astfel, am decis sa tratez ambele atoiuri cu aceeasi bucla, daca e pozitiv am obtinut direct
rezultatul. Daca e negativ, pornesc atoiul de la caracterul 1 il calculez pozitiv (in modul),
dupa care inmultesc eax cu -1 pentru a obtine valoarea reala.

Alta problema care a cauzat cele mai costisitoare probleme din perspectiva timp a fost parasarea
argumentelor pentru operatii prin recursivitate. Ideea initiala a fost ca dupa fiecare atoi fie el
pozitiv sau negativ sa dau push la eax. Iar in momentul in care se ajunge la o operatie prin
recursivitate sa fac pop edx, pop eax (operandul drept fiind intotdeauna cel introdus ultimul 
//se datoreaza parcurgerii arborelui in postordine), iar cel stang penultimul. Si in urma operatiei sa fac din nou push eax pe stiva. Urmand ca, in final, rezultatul tuturor operatiilor sa fie ultimul element incarcat pe stiva. Insa aceasta abordare era dificila deoarece la fiecare "urcare" in
recursivitate stiva isi muta baza si pointerul si valorile trimise cu push se pierdeau sau nu aveam
o formula dupa care sa le pot obtine constant.
Prima solutionare a acestui neajuns a fost sa observ facand debugging cu sasm ca in urma fiecarui atoi
operandul drept ramanea memorat in eax. Asadar m-am gandit sa folosesc o variabila globala ca 
"artificiu" in care sa imi memorez eax inainte de a trece prin atoi si operandul drept sa il mut la
nevoie din eax, in edx. (pentru adunarea si scadere: mov edx, eax         
					  	     mov eax, [auxiliar]
					  	     add/sub eax, edx
			 		pentru inmultire si impartire:  mov ecx, eax
(edx este folosit in efectuarea operatiei si atunci trebuie xorat)  	mov eax, [auxiliar]
									xor edx, edx
									cdq (pt impartire
									imul ecx
Atunci in variabila globala ar fi urmat ca dupa recurenta sa se gaseasca rezultatul final.
Insa am remarcat ca in teste precum testul 12: + - + 8 8 8 / 9 7
In momentul in care termina partea stanga a arborelui in auxiliar se va gasi valoarea 8
Se trece in partea dreapta avem atoi 9, eax e 9, atoi 7 eax e 7 si auxiliar e 9, se face impartirea
9/7=1, dar in momentul in care adunam la auxiliar 1, 8 era suprascris de 9, din cauza atoi 7.
Atunci rezultatul final din auxiliar ar fi fost 9+1=10!=9
Initial am incercat sa rezolv aceasta inconvenienta pastrand 2 variabile globale auxiliar1 si
auxiliar2, cea de-a doua facand backup la ultima valoare din auxiliar1, dar fiind o recursivitate
devenise laborios de folosit.

Am rezolvat in cele din urma cu ajutorul wikiului despre AST oferit ca support al temei:
https://en.wikipedia.org/wiki/Abstract_syntax_tree
In aceasta pagina de wiki, primul link la further reading este un pdf al lui Joel Jones.
In acest paper la pagina 4, capitolul 6, subcapitolul 6.2 Solution: Nodes as define over
M-a dus cu gandul la ideea de a suprascrie informatia data ca string in fiecare copil cu valoarea
efectiva obtinuta in urma atoiului sau a operatiei dintre copii stang si drept.
Initial am fost sceptic cu privire la aceasta abordare deoarece consideram ca se pierd pointerii la
string si ramane memorie alocata care in urma dezalocarii nu mai poate fi eliberata. Insa dupa ce am
citit mai mult pe stackoverflow si pe forumul dedicat temei aceasta abordare nu intampina problema
mentionata anterior. In spatiul ALOCAT in care se afla stringul ramane o valoare numerica suprascrisa.
In urma dezalocarii se dezaloca acelasi spatiu care a fost alocat in prima faza pentru a-i face loc
stringului. Aceasta implementare e posibila datorita faptului ca numerele retinute sunt mici, maxim 4
octeti, iar stringul are alocat cate un byte pentru fiecare caracter deci sigur
stringul numarului>>>numarul in sine convertit in numeric.

Implementarea propriu-zisa:
	Functia principala este final_result, o functie recursiva care parcurge arborele in postordine
Ea primeste ca input adresa unui nod (in main a rootului). Conditia de oprire din recursivitate este
daca functia a ajuns la o adresa 0, adica la null (initial am vrut sa pun conditia de oprire ajungerea
la numere deoarece acestea erau garantat frunze, dar aceasta idee complica atat scrierea codului, cat
si complexitatea algoritmului pentru null se mai fac 2 parcurgeri in adancime pe fiecare frunza
fiecare cu complexitate O(1) //cmp, dar la nivelul nodurilor ocupate cu informatie tot O(1) este
verificarea, iar la metoda mea nu se mai fac verificari in adancime, in schimb pe fiecare nod ocupat
se fac comparatii cu semnele de operatie si pentru - si cu urmatorul caracter care inseamna minim O(4)
/O(5)). Dupa ce am ajuns la baza arborelui unde sigur se afla numai frunze, se face atoi si se
determina valoarea reala spre care puncteaza stringul din data nodului. Se inlocuieste stringul cu
aceasta valoare reala si se urca in arbore. La urcarea in arbore pe nodul cu operatie se cauta
operatia specifica, dataul din copilul stang devine operandul stang (retinut in eax) iar operandul
drept este retinut in edx(adunare, scadere) sau in ecx (inmultire impartire), dupa efectuarea
operatiei curente, rezultatul (ramas in eax) este suprascris in dataul nodului curent si se urca in
arbore recursiv pana se ajunge inapoi la root. In momentul in care s-a ajuns la root se paraseste
recursivitatea si se printeaza data-ul din root, care acum este rezultatul tuturor operatiilor.
	Atoi_pozitiv/Atoi_negativ cum am explicat si mai sus face conversia corespunzator unei functii in C de forma:
	eax=0
	for(i=0 (la nr pozitive)/ i=1 (la nr negative); i<=strlen(string); i++)
		eax=eax*10+(dl-'0') unde in dl este memorat caracterul curent
	In cazul atoiului negativ se verifica intai primul caracter pentru a fi minus, dupa care se
mai verifica o data la sfarsitul calculului in valoare absoluta si pentru numere negative se
inmulteste cu -1.
	for_atoi_poz este forul in care se itereaza pentru obtinerea valorii pozitive(absolute)
	afara marcheaza iesirea din for si deci terminarea sirului de caractere si restabileste daca
		numarul era pozitiv sau negativ si daca era negativ ii "pune_minus" dupa care
		"nr_e_negativ_acum"

Etichetele adunare, inmultire, impartire au nume sugestive, codul de dupa ele realizeaza cu ajutorul
copiilor operatiile specifice si memoreaza rezultatul in nodul curent.
minus stabileste daca simbolul '-' este parte dintr-un numar sau este simbolul pentru scadere, iar
scadere este analog celorlalte operatii.

end_of_recursion marcheaza sfarsitul recursivitatii si iesirea de pe nodul curent fie miscarea
ascendenta sau descendenta.

That's all! :)
